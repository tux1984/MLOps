version: '3.8'

x-airflow-common: &airflow-common
  build:
    context: docker/airflow
    dockerfile: Dockerfile
  image: ${AIRFLOW_IMAGE_NAME:-mlops-airflow:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    APP_DB_HOST: db
    APP_DB_PORT: 5432
    APP_DB_NAME: ${POSTGRES_DB:-appdb}
    APP_DB_USER: ${POSTGRES_USER:-app}
    APP_DB_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    SHARED_DIR: /shared
    SOURCE_API_BASE_URL: ${SOURCE_API_BASE_URL:-http://10.43.100.103:8080}
    GROUP_NUMBER: ${GROUP_NUMBER:-8}
    MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL:-http://minio:9000}
    MLFLOW_S3_BUCKET: ${MLFLOW_S3_BUCKET:-mlflow-artifacts}
    AWS_ACCESS_KEY_ID: ${MLFLOW_S3_ACCESS_KEY:-mlflow}
    AWS_SECRET_ACCESS_KEY: ${MLFLOW_S3_SECRET_KEY:-mlflow123}
    AWS_DEFAULT_REGION: ${MLFLOW_S3_REGION:-us-east-1}
    MLFLOW_EXPERIMENT_NAME: ${MLFLOW_EXPERIMENT_NAME:-forest-cover-experiment}
    MLFLOW_MODEL_NAME: ${MLFLOW_MODEL_NAME:-forest-cover-classifier}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/shared:/shared
  user: "${AIRFLOW_UID:-50000}:0"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - '8080:8080'
    restart: always
    depends_on:
      - airflow-init
      - redis
      - postgres
      - db

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      - airflow-init
      - redis
      - postgres
      - db

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: '0'
    restart: always
    depends_on:
      - airflow-init
      - redis
      - postgres
      - db

  minio:
    image: quay.io/minio/minio:RELEASE.2024-01-05T22-17-24Z
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-mlflow}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-mlflow123}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    restart: unless-stopped

    
  minio-create-buckets:
    image: quay.io/minio/mc:latest
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-mlflow}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-mlflow123}
      MLFLOW_S3_BUCKET: ${MLFLOW_S3_BUCKET:-mlflow-artifacts}
    entrypoint: >
      /bin/sh -c "
        until /usr/bin/mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD; do
          echo 'Waiting for MinIO...';
          sleep 3;
        done;
        /usr/bin/mc mb --ignore-existing local/$$MLFLOW_S3_BUCKET;
        exit 0
      "
    restart: 'no'

  mlflow-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MLFLOW_DB_ROOT_PASSWORD:-mlflowroot}
      MYSQL_DATABASE: ${MLFLOW_DB_NAME:-mlflow}
      MYSQL_USER: ${MLFLOW_DB_USER:-mlflow}
      MYSQL_PASSWORD: ${MLFLOW_DB_PASSWORD:-mlflow}
    volumes:
      - mlflow-db-data:/var/lib/mysql
    restart: unless-stopped

  mlflow:
    build:
      context: docker/mlflow
      dockerfile: Dockerfile
    image: ${MLFLOW_IMAGE_NAME:-mlops-mlflow:latest}
    depends_on:
      - mlflow-db
      - minio
      - minio-create-buckets
    environment:
      BACKEND_STORE_URI: mysql+pymysql://${MLFLOW_DB_USER:-mlflow}:${MLFLOW_DB_PASSWORD:-mlflow}@mlflow-db:3306/${MLFLOW_DB_NAME:-mlflow}
      DEFAULT_ARTIFACT_ROOT: s3://${MLFLOW_S3_BUCKET:-mlflow-artifacts}
      AWS_ACCESS_KEY_ID: ${MLFLOW_S3_ACCESS_KEY:-mlflow}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_S3_SECRET_KEY:-mlflow123}
      AWS_DEFAULT_REGION: ${MLFLOW_S3_REGION:-us-east-1}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL:-http://minio:9000}
    ports:
      - '5000:5000'
    restart: unless-stopped

  inference:
    build:
      context: services/inference
      dockerfile: Dockerfile
    image: ${INFERENCE_IMAGE_NAME:-mlops-inference:latest}
    depends_on:
      - mlflow
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      MLFLOW_MODEL_NAME: ${MLFLOW_MODEL_NAME:-forest-cover-classifier}
      AWS_ACCESS_KEY_ID: ${MLFLOW_S3_ACCESS_KEY:-mlflow}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_S3_SECRET_KEY:-mlflow123}
      AWS_DEFAULT_REGION: ${MLFLOW_S3_REGION:-us-east-1}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL:-http://minio:9000}
      MLFLOW_ENABLE_MODEL_REGISTRY: ${MLFLOW_ENABLE_MODEL_REGISTRY:-false}
      MODEL_STATE_PATH: ${MODEL_STATE_PATH:-/shared/models/latest_model.json}
    ports:
      - '8000:8000'
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/shared:/shared
    restart: unless-stopped

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    depends_on:
      - airflow-init
      - redis
      - postgres
      - db

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: '0:0'
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: '0'
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - '5555:5555'
    restart: always
    depends_on:
      - airflow-init
      - redis
      - postgres
      - db

  db:
    image: postgres:16
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d:ro

volumes:
  postgres-db-volume:
  db_data:
  minio-data:
  mlflow-db-data:
